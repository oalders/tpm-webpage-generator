#!/usr/bin/env perl
#
# Program to build Toronto Perl Mongers index page.

use 5.010_001;    # for say etc.

## no critic (RequireUseStrict, RequireUseWarnings)
# Modert::Perl turns on strict and warnings.

use Modern::Perl;

use Path::Class;
use File::Basename;
use Readonly;
use Data::Dumper;
use English '-no_match_vars';
use Template;
use Carp;
use File::Find::Rule;
use Date::Parse;
use POSIX 'strftime';

# These should be generated one day...
my $root = q{..};

my $sections = get_sections( dir( $root, 'sections' ) );
my $years_meetings
    = group_meetings_by_year( get_meetings( dir( $root, 'meetings' ) ) );

my $template = Template->new( { RELATIVE => 1 } );
$template->process(
    file( $root, 'templates', 'index.tt' )->stringify,
    {   sections       => $sections,
        years_meetings => $years_meetings,
        generated_at   => scalar localtime,
    }
) || croak $template->error();

exit 0;

# in:
#   directory under which sections live in separate html files
# out:
#   sorted list of sections { name => ..., content => ... }
#
# File names determine the section names, the files are assumed to
# contain valid HTML.
sub get_sections {
    my ($frag_dir) = @_;
    Readonly my $SECTION_SUFFIX => '.html';
    my @sections;

    for my $entry ( sort grep {/\Q$SECTION_SUFFIX\E\z/xms}
        dir($frag_dir)->children )
    {
        local $RS = undef;
        push @sections,
            {
            name    => basename( $entry, $SECTION_SUFFIX ),
            content => scalar file($entry)->slurp,
            };
    }

    return \@sections;
}

# in:
#  directory for root of tree
# out:
#  list of meetings (currently a hash)
#
# Meeting files are stored under (roughly):
#
#  .../$meetings_dir/yyyy/mm-dd/title.html
#
# TODO maybe one day get rid of the path separator in the regex, which
# kind of defeates the goodness of the Path::Class stuff.
sub get_meetings {
    my ($meetings_dir) = @_;
    my @meetings;

FILE:
    for my $file ( find( file => name => '*.html', in => $meetings_dir ) ) {

        # TODO figure out how to let perlcritic safely let me do
        #
        # next FILE unless $file =~ m{ ... };
        #
        # and then use the matched chunks.
        if ($file =~ m{ / (?<year>\d{4})
                        / (?<month>\d\d) - (?<date>\d\d)
                        / (?<title>[^/]+) \.html
                        \z
                      }xms
            )
        {
            my $date      = "$+{year}-$+{month}-$+{date}";
            my $title     = $LAST_PAREN_MATCH{title};
            my $timestamp = str2time($date);

            push @meetings,
                {
                timestamp => $timestamp,
                date      => strftime( '%c', localtime $timestamp ),
                title     => $title,
                content   => scalar file($file)->slurp,
                };
        }
    }

    return \@meetings;
}

# in:
#   ref to unordered list of meetings
# out:
#   ref to list of hashes { year => yyyy, meetings => [ ... ] }
sub group_meetings_by_year {
    my ($unordered_list) = @_;
    my @list = sort {
               $a->{timestamp} <=> $b->{timestamp}
            || $a->{title} cmp $b->{title}
    } @{$unordered_list};

    my @year_groups;
    for my $meeting (@list) {
        my $year = strftime( '%Y', localtime $meeting->{timestamp} );

        if (   @year_groups == 0
            || $year != $year_groups[-1]{year} )
        {
            push @year_groups, { year => $year, meetings => [] };
        }

        push @{ $year_groups[-1]{meetings} }, $meeting;
    }

    return \@year_groups;
}

__END__

=pod

=head1 NAME

build-index - a program to build Toronto Perl Mongers' index page.

=head1 USAGE

  build-index

=head1 DESCRIPTION

This program assembles the Toronto Perl Mongers' home page out of bits and 
pieces.

=head1 REQUIRED ARGUMENTS

None

=head1 OPTIONS

=head1 DIAGNOSTICS

=head1 EXIT STATUS

0 for success, something else otherwise.

=head1 CONFIGURATION

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head2 Assumptions

=over 4

=item *

One event per day

=item *

People have Java Script turned on.  This is the 21st century!

=back

=head1 AUTHOR

=head1 LICENSE AND COPYRIGHT

=cut
